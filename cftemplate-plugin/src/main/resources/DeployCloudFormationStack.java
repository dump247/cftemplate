import java.io.IOException;
import java.io.InputStream;
import java.security.CodeSource;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

/**
 * Deploy a CloudFormation stack.
 * <p/>
 * This class is compiled and injected into the jar generated by the maven template compiler plugin.
 */
public class DeployCloudFormationStack {
    private static Map<String, String> _stackNames;

    private static void printUsage() {
        System.out.println("DeployCloudFormationStack <stack> [-r <region>] [-s <stack-name>] [-p name=value]");
        System.out.println("stack     name of the stack to deploy");
        System.out.println("          values: " + listStacksStr());
        System.out.println("-- Options --");
        System.out.println("-r/--region REGION        region to deploy the stack to");
        System.out.println("                          default is us-east-1");
        System.out.println("-s/--stack-name NAME      name to create the stack with");
        System.out.println("                          default is <stack>");
        System.out.println("-p/--parameter NAME=VALUE set a stack parameter");
    }

    private static Map<String, String> listStacks() {
        if (_stackNames == null) {
            _stackNames = new HashMap<String, String>();
            
            InputStream jarStream = null;

            try {
                CodeSource source = DeployCloudFormationStack.class.getProtectionDomain().getCodeSource();

                if (source != null) {
                    jarStream = source.getLocation().openStream();
                    ZipInputStream jarZip = new ZipInputStream(jarStream);
                    ZipEntry jarEntry;

                    while ((jarEntry = jarZip.getNextEntry()) != null) {
                        String entryName = jarEntry.getName();

                        if (entryName.toLowerCase().endsWith("stack.json")) {
                            entryName = entryName.substring(0, entryName.length() - "stack.json".length());

                            if (entryName.endsWith("-") || entryName.endsWith("_")) {
                                entryName = entryName.substring(0, entryName.length() - 1);
                            }

                            _stackNames.put(entryName.toLowerCase(), entryName);
                        }
                    }
                } else {
                    exit(100, "INTERNAL FAILURE: Unable to list stacks. CodeSource not provided.");
                }
            } catch (Exception ex) {
                exit(100, "INTERNAL FAILURE: Unable to list stacks. " + ex.getClass() + ": " + ex.getMessage());
            } finally {
                if (jarStream != null) {
                    try {
                        jarStream.close();
                    } catch (IOException ex) {
                        // Ignore
                    }
                }
            }
        }

        return _stackNames;
    }

    private static String listStacksStr() {
        StringBuilder buffer = new StringBuilder();
        
        for (String name : listStacks().values()) {
            if (buffer.length() > 0) {
                buffer.append(", ");
            }
            
            buffer.append(name);
        }

        return buffer.toString();
    }

    private static void exit(int status, String error) {
        if (error != null && error.length() > 0) {
            System.err.println(error);
        }

        printUsage();
        System.exit(status);
    }

    private static String asString(Object value) {
        return value == null ? "" : value.toString();
    }
    
    public static void main(String[] args) {
        // ONLY USE STANDARD JAVA SDK AND AWS SDK!!!
        // Other classes will not be available at runtime.

        String stackName;
        String targetStackName;
        String targetRegion = "us-east-1";
        Map<String, String> parameters = new HashMap<String, String>();

        if (args.length == 0) {
            exit(1, null);
            return;
        }

        stackName = asString(args[0]);

        if (stackName.length() == 0 || stackName.startsWith("-")) {
            exit(1, "First argument must be the name of the stack to deploy.");
            return;
        }

        stackName = targetStackName = listStacks().get(stackName.toLowerCase());

        if (stackName == null) {
            exit(1, "Unknown stack name: " + args[0]);
            return;
        }

        targetStackName = targetStackName.replace('/', '-').replace('\\', '-').trim();

        for (int i = 1; i < args.length; i += 1) {
            String argName = args[i];

            if (argName.equals("-s") || argName.equals("--stack-name")) {
                
            } else if (argName.equals("-r") || argName.equals("--region")) {

            } else if (argName.equals("-p") || argName.equals("--parameter")) {

            } else {
                exit(1, "Unknown option: " + argName);
                return;
            }
        }
    }
}
